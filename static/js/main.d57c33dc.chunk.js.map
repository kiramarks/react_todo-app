{"version":3,"sources":["components/Todo/Todo.js","components/TodoList/TodoList.js","api/todos.js","App.js","index.js"],"names":["Todo","todo","deleteTodo","changeStatus","className","classNames","view","completed","type","id","onChange","checked","htmlFor","title","onClick","TodoList","todos","map","key","App","state","todosFromServer","length","filter","isAllSelected","isAllBtnSelected","isActiveBtnSelected","isCompletedBtnSelected","handleInputTitle","target","setState","value","addNewTodo","event","trim","todoId","findIndex","item","remainingTodos","splice","filterAll","filterActive","filterCompleted","clearCompleted","selectAll","this","currentTodos","completedTodos","activeTodos","forEach","push","placeholder","onKeyDown","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d57c33dc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const Todo = ({ todo, deleteTodo, changeStatus }) => (\n  <li className={classNames({\n    view: true,\n    completed: todo.completed,\n  })}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={todo.id}\n        onChange={() => changeStatus(todo.id)}\n        checked={todo.completed}\n\n      />\n      <label htmlFor={todo.id}>{todo.title}</label>\n      <button\n        type=\"button\"\n        id={todo.id}\n        className=\"destroy\"\n        onClick={deleteTodo}\n      />\n    </div>\n    <input\n      type=\"text\"\n      className=\"edit\"\n    />\n  </li>\n);\n\nTodo.propTypes = {\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo/Todo';\n\nexport const TodoList = ({ todos, deleteTodo, changeStatus }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        todo={todo}\n        key={todo.id}\n        deleteTodo={deleteTodo}\n        changeStatus={changeStatus}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n};\n","/* eslint-disable max-len */\n\nconst todos = [\n  {\n    id: 1,\n    title: 'Todo#1',\n    completed: false,\n  },\n  {\n    id: 2,\n    title: 'Todo#2',\n    completed: false,\n  },\n];\n\nexport default todos;\n","import React from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport todosFromServer from './api/todos';\n\nclass App extends React.Component {\n  state = {\n    todos: todosFromServer,\n    id: todosFromServer.length,\n    title: '',\n    completed: false,\n    filter: 'all',\n    isAllSelected: false,\n    isAllBtnSelected: false,\n    isActiveBtnSelected: false,\n    isCompletedBtnSelected: false,\n  }\n\n  handleInputTitle = ({ target }) => {\n    this.setState({\n      title: target.value,\n    });\n  }\n\n  addNewTodo = (event) => {\n    if (event.key === 'Enter'\n      && this.state.title.trim() !== '') {\n      this.setState(state => ({\n        todos: [\n          ...state.todos,\n          {\n            id: state.id + 1,\n            title: state.title,\n            completed: false,\n          }],\n        id: state.id + 1,\n        title: '',\n      }));\n    }\n  }\n\n  deleteTodo = ({ target }) => {\n    const todoId = this.state.todos.findIndex(item => item.id === +target.id);\n\n    this.setState((state) => {\n      const remainingTodos = [...state.todos];\n\n      remainingTodos.splice(todoId, 1);\n\n      return (\n        {\n          todos: [...remainingTodos],\n        }\n      );\n    });\n  }\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  filterAll = () => {\n    this.setState({\n      filter: 'all',\n      isAllBtnSelected: true,\n      isActiveBtnSelected: false,\n      isCompletedBtnSelected: false,\n    });\n  }\n\n  filterActive = () => {\n    this.setState({\n      filter: 'active',\n      isAllBtnSelected: false,\n      isActiveBtnSelected: true,\n      isCompletedBtnSelected: false,\n    });\n  }\n\n  filterCompleted = () => {\n    this.setState({\n      filter: 'completed',\n      isAllBtnSelected: false,\n      isActiveBtnSelected: false,\n      isCompletedBtnSelected: true,\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  selectAll = () => {\n    this.setState(state => ({\n      isAllSelected: !state.isAllSelected,\n      todos: state.todos.map(todo => ({\n        ...todo,\n        completed: !state.isAllSelected,\n      })),\n    }));\n  }\n\n  render() {\n    const { todos,\n      title,\n      filter,\n      isAllSelected,\n      isActiveBtnSelected,\n      isAllBtnSelected,\n      isCompletedBtnSelected } = this.state;\n\n    let currentTodos = [...todos];\n\n    const completedTodos = [];\n    const activeTodos = [];\n\n    todos.forEach((todo) => {\n      if (todo.completed) {\n        completedTodos.push(todo);\n      } else {\n        activeTodos.push(todo);\n      }\n    });\n\n    if (filter === 'active') {\n      currentTodos = activeTodos;\n    }\n\n    if (filter === 'completed') {\n      currentTodos = completedTodos;\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleInputTitle}\n            onKeyDown={this.addNewTodo}\n            value={title}\n          />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.selectAll}\n            checked={isAllSelected}\n          />\n          <label htmlFor=\"toggle-all\">\n            Mark all as complete\n          </label>\n\n          <TodoList\n            todos={currentTodos}\n            deleteTodo={this.deleteTodo}\n            changeStatus={this.changeStatus}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {activeTodos.length}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={isAllBtnSelected ? 'selected' : ''}\n                onClick={this.filterAll}\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                className={isActiveBtnSelected ? 'selected' : ''}\n                onClick={this.filterActive}\n              >\n                Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                className={isCompletedBtnSelected ? 'selected' : ''}\n                onClick={this.filterCompleted}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.scss';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}