{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["Todo","todo","editTodo","editCurrentTitle","handleEditingTitle","deleteTodo","changeStatus","className","classNames","view","editing","edited","completed","id","type","onChange","checked","htmlFor","onDoubleClick","title","onClick","defaultValue","onKeyDown","onBlur","TodoList","todos","tempTitle","map","key","App","state","filter","isAllBtnSelected","isActiveBtnSelected","isCompletedBtnSelected","handleInputTitle","target","setState","value","addNewTodo","event","trim","preventDefault","todoId","findIndex","remainingTodos","splice","filterAll","filterActive","filterCompleted","clearCompleted","selectAll","cacheTodos","JSON","parse","localStorage","getItem","this","prevState","saveToLocalStorage","stringify","setItem","currentTodos","onSubmit","placeholder","length","every","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e8f9c3e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const Todo = ({\n  todo,\n  editTodo,\n  editCurrentTitle,\n  handleEditingTitle,\n  deleteTodo,\n  changeStatus,\n}) => (\n  <li className={classNames({\n    view: true,\n    editing: todo.edited,\n    completed: todo.completed,\n  })}\n  >\n    <div className=\"view\">\n      <input\n        id={todo.id}\n        type=\"checkbox\"\n        className=\"toggle\"\n        onChange={() => changeStatus(todo.id)}\n        checked={todo.completed}\n      />\n      <label\n        htmlFor={todo.id}\n        onDoubleClick={() => editTodo(todo.id, todo.title)}\n      >\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        id={todo.id}\n        className=\"destroy\"\n        onClick={deleteTodo}\n      />\n    </div>\n    <input\n      type=\"text\"\n      id={todo.id}\n      className=\"edit\"\n      defaultValue={todo.title}\n      onChange={editCurrentTitle}\n      onKeyDown={handleEditingTitle}\n      onBlur={handleEditingTitle}\n    />\n  </li>\n);\n\nTodo.propTypes = {\n  editCurrentTitle: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  handleEditingTitle: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    edited: PropTypes.bool,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from './Todo';\n\nexport const TodoList = ({\n  todos,\n  tempTitle,\n  editCurrentTitle,\n  handleEditingTitle,\n  editTodo,\n  deleteTodo,\n  changeStatus,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        todo={todo}\n        tempTitle={tempTitle}\n        key={todo.id}\n        editTodo={editTodo}\n        deleteTodo={deleteTodo}\n        changeStatus={changeStatus}\n        editCurrentTitle={editCurrentTitle}\n        handleEditingTitle={handleEditingTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  tempTitle: PropTypes.string.isRequired,\n  editCurrentTitle: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  handleEditingTitle: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n};\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    id: 0,\n    title: '',\n    tempTitle: '',\n    filter: 'all',\n    isAllBtnSelected: false,\n    isActiveBtnSelected: false,\n    isCompletedBtnSelected: false,\n  }\n\n  componentDidMount() {\n    const cacheTodos = JSON.parse(localStorage.getItem('todos'));\n\n    if (cacheTodos) {\n      this.setState({ todos: cacheTodos });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    const { todos } = this.state;\n\n    if (prevState.todos !== todos) {\n      this.saveToLocalStorage();\n    }\n  }\n\n  handleInputTitle = ({ target }) => {\n    this.setState({\n      title: target.value,\n    });\n  }\n\n  addNewTodo = (event) => {\n    if (this.state.title.trim() !== '') {\n      this.setState(state => ({\n        todos: [\n          ...state.todos,\n          {\n            id: state.id + 1,\n            title: state.title,\n            completed: false,\n            edited: false,\n          }],\n        id: state.id + 1,\n        title: '',\n      }));\n    }\n\n    event.preventDefault();\n  }\n\n  editTodo = (id, title) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            edited: !todo.edited,\n          };\n        }\n\n        return todo;\n      }),\n      tempTitle: title,\n    }));\n  }\n\n  editCurrentTitle = ({ target }) => {\n    const id = +target.id;\n    const { value } = target;\n\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: value,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  handleEditingTitle = ({ key, target, type }) => {\n    if ((key === 'Enter' && target.value.trim() !== '')\n      || type === 'blur') {\n      const id = +target.id;\n\n      this.setState(state => ({\n        todos: state.todos.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              edited: false,\n            };\n          }\n\n          return todo;\n        }),\n      }));\n    }\n\n    if (key === 'Escape') {\n      const id = +target.id;\n\n      this.setState(state => ({\n        todos: state.todos.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              title: state.tempTitle,\n              edited: false,\n            };\n          }\n\n          return todo;\n        }),\n      }));\n    }\n  }\n\n  deleteTodo = ({ target }) => {\n    const todoId = this.state.todos.findIndex(todo => todo.id === +target.id);\n\n    this.setState((state) => {\n      const remainingTodos = [...state.todos];\n\n      remainingTodos.splice(todoId, 1);\n\n      return (\n        {\n          todos: [...remainingTodos],\n        }\n      );\n    });\n  }\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  filterAll = () => {\n    this.setState({\n      filter: 'all',\n      isAllBtnSelected: true,\n      isActiveBtnSelected: false,\n      isCompletedBtnSelected: false,\n    });\n  }\n\n  filterActive = () => {\n    this.setState({\n      filter: 'active',\n      isAllBtnSelected: false,\n      isActiveBtnSelected: true,\n      isCompletedBtnSelected: false,\n    });\n  }\n\n  filterCompleted = () => {\n    this.setState({\n      filter: 'completed',\n      isAllBtnSelected: false,\n      isActiveBtnSelected: false,\n      isCompletedBtnSelected: true,\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  selectAll = ({ target }) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  }\n\n  saveToLocalStorage() {\n    const todos = JSON.stringify(this.state.todos);\n\n    localStorage.setItem('todos', todos);\n  }\n\n  render() {\n    const {\n      todos,\n      title,\n      filter,\n      tempTitle,\n      isActiveBtnSelected,\n      isAllBtnSelected,\n      isCompletedBtnSelected,\n    } = this.state;\n\n    let currentTodos = [...todos];\n\n    if (filter === 'active') {\n      currentTodos = currentTodos.filter(todo => !todo.completed);\n    }\n\n    if (filter === 'completed') {\n      currentTodos = currentTodos.filter(todo => todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.addNewTodo}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              onChange={this.handleInputTitle}\n              value={title}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          {todos.length > 0 && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onChange={this.selectAll}\n                checked={todos.every(todo => todo.completed)}\n              />\n              <label htmlFor=\"toggle-all\">\n                Mark all as complete\n              </label>\n            </>\n          )}\n\n          <TodoList\n            todos={currentTodos}\n            editTodo={this.editTodo}\n            tempTitle={tempTitle}\n            deleteTodo={this.deleteTodo}\n            changeStatus={this.changeStatus}\n            editCurrentTitle={this.editCurrentTitle}\n            handleEditingTitle={this.handleEditingTitle}\n          />\n        </section>\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {todos.filter(todo => !todo.completed).length}\n              {' '}\n              items left\n            </span>\n\n            <ul className=\"filters\">\n              <li>\n                <a\n                  href=\"#/\"\n                  className={isAllBtnSelected ? 'selected' : ''}\n                  onClick={this.filterAll}\n                >\n                  All\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/active\"\n                  className={isActiveBtnSelected ? 'selected' : ''}\n                  onClick={this.filterActive}\n                >\n                  Active\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#/completed\"\n                  className={isCompletedBtnSelected ? 'selected' : ''}\n                  onClick={this.filterCompleted}\n                >\n                  Completed\n                </a>\n              </li>\n            </ul>\n            {todos.filter(todo => todo.completed).length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={this.clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.scss';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}