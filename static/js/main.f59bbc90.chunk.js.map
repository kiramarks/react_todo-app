{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["Todo","state","editMode","tempTitle","startEditMode","setState","props","todo","title","handleChangingTitle","target","value","handleEditingBlur","editCurrentTitle","id","editOnKeyDown","key","trim","length","this","deleteTodo","changeStatus","className","classNames","editing","completed","type","onChange","checked","onDoubleClick","onClick","onBlur","onKeyDown","autoFocus","React","Component","TodoList","todos","map","App","filter","isAllBtnSelected","isActiveBtnSelected","isCompletedBtnSelected","handleInputTitle","addNewTodo","event","uuidv4","preventDefault","newTitle","filterAll","filterActive","filterCompleted","clearCompleted","selectAll","cacheTodos","JSON","parse","localStorage","getItem","prevState","saveToLocalStorage","stringify","setItem","currentTodos","onSubmit","placeholder","every","htmlFor","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f59bbc90.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport class Todo extends React.Component {\n  state = {\n    editMode: false,\n    tempTitle: '',\n  }\n\n  startEditMode = () => (\n    this.setState({\n      editMode: true,\n      tempTitle: this.props.todo.title,\n    }))\n\n  handleChangingTitle = ({ target }) => {\n    this.setState({\n      tempTitle: target.value,\n    });\n  }\n\n  handleEditingBlur = ({ target }) => {\n    const { todo, editCurrentTitle } = this.props;\n    const tempTitle = target.value;\n\n    editCurrentTitle(todo.id, tempTitle);\n    this.setState({ editMode: false });\n  }\n\n  editOnKeyDown = ({ target, key }) => {\n    const { todo, editCurrentTitle } = this.props;\n\n    const tempTitle = target.value;\n\n    if (key === 'Enter' && tempTitle.trim().length !== 0) {\n      editCurrentTitle(todo.id, tempTitle);\n      this.setState({ editMode: false });\n    }\n\n    if (key === 'Escape') {\n      this.setState({ editMode: false });\n    }\n  }\n\n  render() {\n    const { todo, deleteTodo, changeStatus } = this.props;\n    const { editMode, tempTitle } = this.state;\n\n    return (\n      <li className={classNames({\n        editing: editMode,\n        completed: todo.completed,\n      })}\n      >\n        <div className=\"view\">\n          <input\n            id={todo.id}\n            type=\"checkbox\"\n            className=\"toggle\"\n            onChange={() => changeStatus(todo.id)}\n            checked={todo.completed}\n          />\n          <label onDoubleClick={this.startEditMode}>{todo.title}</label>\n          <button\n            type=\"button\"\n            id={todo.id}\n            className=\"destroy\"\n            onClick={() => deleteTodo(todo.id)}\n          />\n        </div>\n        {editMode && (\n          <input\n            type=\"text\"\n            id={todo.id}\n            className=\"edit\"\n            value={tempTitle}\n            onBlur={this.handleEditingBlur}\n            onChange={this.handleChangingTitle}\n            onKeyDown={this.editOnKeyDown}\n            autoFocus\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  editCurrentTitle: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    edited: PropTypes.bool,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from './Todo';\n\nexport const TodoList = ({\n  todos,\n  editCurrentTitle,\n  deleteTodo,\n  changeStatus,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        todo={todo}\n        key={todo.id}\n        id={todo.id}\n        deleteTodo={deleteTodo}\n        changeStatus={changeStatus}\n        editCurrentTitle={editCurrentTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  editCurrentTitle: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n};\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoList } from './components/TodoList';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    title: '',\n    filter: 'all',\n    isAllBtnSelected: false,\n    isActiveBtnSelected: false,\n    isCompletedBtnSelected: false,\n  }\n\n  componentDidMount() {\n    const cacheTodos = JSON.parse(localStorage.getItem('todos'));\n\n    if (cacheTodos) {\n      this.setState({ todos: cacheTodos });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    const { todos } = this.state;\n\n    if (prevState.todos !== todos) {\n      this.saveToLocalStorage();\n    }\n  }\n\n  handleInputTitle = ({ target }) => {\n    this.setState({\n      title: target.value,\n    });\n  }\n\n  addNewTodo = (event) => {\n    if (this.state.title.trim() !== '') {\n      this.setState(state => ({\n        todos: [\n          ...state.todos,\n          {\n            id: uuidv4(),\n            title: state.title,\n            completed: false,\n          }],\n        title: '',\n      }));\n    }\n\n    event.preventDefault();\n  }\n\n  editCurrentTitle = (id, newTitle) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: newTitle,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  deleteTodo = (id) => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  filterAll = () => {\n    this.setState({\n      filter: 'all',\n      isAllBtnSelected: true,\n      isActiveBtnSelected: false,\n      isCompletedBtnSelected: false,\n    });\n  }\n\n  filterActive = () => {\n    this.setState({\n      filter: 'active',\n      isAllBtnSelected: false,\n      isActiveBtnSelected: true,\n      isCompletedBtnSelected: false,\n    });\n  }\n\n  filterCompleted = () => {\n    this.setState({\n      filter: 'completed',\n      isAllBtnSelected: false,\n      isActiveBtnSelected: false,\n      isCompletedBtnSelected: true,\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  selectAll = ({ target }) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  }\n\n  saveToLocalStorage() {\n    const todos = JSON.stringify(this.state.todos);\n\n    localStorage.setItem('todos', todos);\n  }\n\n  render() {\n    const {\n      todos,\n      title,\n      filter,\n      isActiveBtnSelected,\n      isAllBtnSelected,\n      isCompletedBtnSelected,\n    } = this.state;\n\n    let currentTodos = [...todos];\n\n    if (filter === 'active') {\n      currentTodos = currentTodos.filter(todo => !todo.completed);\n    }\n\n    if (filter === 'completed') {\n      currentTodos = currentTodos.filter(todo => todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.addNewTodo}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              onChange={this.handleInputTitle}\n              value={title}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          {todos.length > 0 && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onChange={this.selectAll}\n                checked={todos.every(todo => todo.completed)}\n              />\n              <label htmlFor=\"toggle-all\">\n                Mark all as complete\n              </label>\n            </>\n          )}\n\n          <TodoList\n            todos={currentTodos}\n            deleteTodo={this.deleteTodo}\n            changeStatus={this.changeStatus}\n            editCurrentTitle={this.editCurrentTitle}\n          />\n        </section>\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {todos.filter(todo => !todo.completed).length}\n              {' '}\n              items left\n            </span>\n\n            <ul className=\"filters\">\n              <li>\n                <a\n                  href=\"#/\"\n                  className={isAllBtnSelected ? 'selected' : ''}\n                  onClick={this.filterAll}\n                >\n                  All\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/active\"\n                  className={isActiveBtnSelected ? 'selected' : ''}\n                  onClick={this.filterActive}\n                >\n                  Active\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#/completed\"\n                  className={isCompletedBtnSelected ? 'selected' : ''}\n                  onClick={this.filterCompleted}\n                >\n                  Completed\n                </a>\n              </li>\n            </ul>\n            {todos.filter(todo => todo.completed).length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={this.clearCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.scss';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}